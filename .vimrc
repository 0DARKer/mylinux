"la"le"<>q"<>Q"<>w"<>W"nw"m"<F11>"<>i"<>h"<>rcw"<>cc<>cu" vundle 环境设置filetype offset rtp+=~/.vim/bundle/Vundle.vim" vundle 管理的插件列表必须位于 vundle#begin() 和 vundle#end() 之间call vundle#begin()"插件列表开始Plugin 'VundleVim/Vundle.vim'Plugin 'altercation/vim-colors-solarized'Plugin 'octol/vim-cpp-enhanced-highlight'Plugin 'nathanaelkane/vim-indent-guides'Plugin 'derekwyatt/vim-fswitch'Plugin 'scrooloose/nerdcommenter'Plugin 'SirVer/ultisnips'Plugin 'Valloric/YouCompleteMe'" 插件列表结束call vundle#end()filetype plugin indent on"自动文件类型检测filetype onfiletype plugin on"快捷键let mapleader=";"nmap la 0nmap le $nmap <leader>q :q<CR>nmap <leader>Q :q!<CR>nmap <leader>w :w<CR>nmap <leader>W :wq<CR>nnoremap nw	<C-W><C-W>nmap <leader>m :%<CR>"立即生效autocmd BufWritePost $MYVIMRC source $MYVIMRC"搜索set incsearchset ignorecaseset nocompatibleset wildmenu"配色set background=darkcolorscheme solarized"专注set gcr=a:block-blinkon0set guioptions-=lset guioptions-=Lset guioptions-=rset guioptions-=Rset guioptions-=mset guioptions-=T" 将外部命令 wmctrl 控制窗口最大化的命令行参数封装成一个 vim 的函数fun! ToggleFullscreen()call system("wmctrl -ir " . v:windowid . " -b toggle,fullscreen")endf" 全屏开/关快捷键map <silent> <F11> :call ToggleFullscreen()<CR>" 启动 vim 时自动全屏"autocmd VimEnter * call ToggleFullscreen()" 总是显示状态栏"set laststatus=2" 显示光标当前位置"set ruler" 开启行号显示"set number" 高亮显示当前行/列"set cursorline"set cursorcolumn" 高亮显示搜索结果set hlsearch"禁止折行set nowrap" 开启语法高亮功能syntax enable" 允许用指定语法高亮配色方案替换默认方案syntax on" 自适应不同语言的智能缩进filetype indent on" 将制表符扩展为空格set expandtab" 设置编辑时制表符占用空格数set tabstop=4" 设置格式化时制表符占用空格数set shiftwidth=4" 让 vim 把连续数量的空格视为一个制表符set softtabstop=4"对齐线" 随 vim 自启动let g:indent_guides_enable_on_vim_startup=1" 从第二层开始可视化显示缩进let g:indent_guides_start_level=2" 色块宽度let g:indent_guides_guide_size=1" 快捷键 i 开/关缩进可视化:nmap <silent> <Leader>i <Plug>IndentGuidesToggle" 基于缩进或语法进行代码折叠"set foldmethod=indentset foldmethod=syntax" 启动 vim 时关闭折叠代码set nofoldenable" *.cpp 和 *.h 间切换nmap <silent> <Leader>h :FSHere<cr>" 替换函数。参数说明：" confirm：是否替换前逐一确认" wholeword：是否整词匹配" replace：被替换字符串function! Replace(confirm, wholeword, replace)walet flag = ''if a:confirmlet flag .= 'gec'elselet flag .= 'ge'endiflet search = ''if a:wholewordlet search .= '\<' . escape(expand('<cword>'), '/\.*$^~[') . '\>'elselet search .= expand('<cword>')endiflet replace = escape(a:replace, '/\&~')execute 'argdo %s/' . search . '/' . replace . '/' . flag . '| update'endfunction" 不询问、整词和非整词nnoremap <Leader>R :call Replace(0, 0, input('Replace '.expand('<cword>').' with: '))<CR>" 不询问、只整词nnoremap <Leader>rw :call Replace(0, 1, input('Replace '.expand('<cword>').' with: '))<CR>" 询问、整词和非整词nnoremap <Leader>rc :call Replace(1, 0, input('Replace '.expand('<cword>').' with: '))<CR>" 询问、只整词nnoremap <Leader>rcw :call Replace(1, 1, input('Replace '.expand('<cword>').' with: '))<CR>nnoremap <Leader>rwc :call Replace(1, 1, input('Replace '.expand('<cword>').' with: '))<CR>"""效率的工具:模板补全""设置模板路径为:~/.vim/bundle/ultisnips/mysnippets/cpp.snippets.let g:UltiSnipsSnippetDirectories=["mysnippets"]" UltiSnips 的 tab 键与 YCM 冲突，重新设定let g:UltiSnipsExpandTrigger="<leader><tab>"let g:UltiSnipsJumpForwardTrigger="<leader><tab>"let g:UltiSnipsJumpBackwardTrigger="<leader><s-tab>"
